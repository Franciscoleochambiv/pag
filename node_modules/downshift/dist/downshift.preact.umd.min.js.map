{"version":3,"file":"downshift.preact.umd.min.js","sources":["../src/set-a11y-status.js","../src/utils.js","../src/downshift.js","../src/index.js"],"sourcesContent":["// istanbul ignore next\nlet statusDiv =\n  typeof document === 'undefined' ?\n    null :\n    document.getElementById('a11y-status-message')\n\nlet statuses = []\n\nfunction setStatus(status) {\n  const isSameAsLast = statuses[statuses.length - 1] === status\n  if (isSameAsLast) {\n    statuses = [...statuses, status]\n  } else {\n    statuses = [status]\n  }\n  const div = getStatusDiv()\n  div.innerHTML = `${statuses.filter(Boolean).map(getStatusHtml).join('')}`\n}\n\nfunction getStatusHtml(status, index) {\n  const display = index === statuses.length - 1 ? 'block' : 'none'\n  return `<div style=\"display:${display};\">${status}</div>`\n}\n\nfunction getStatusDiv() {\n  if (statusDiv) {\n    return statusDiv\n  }\n  statusDiv = document.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'assertive')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  document.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","let idCounter = 1\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\nfunction noop() {}\n\nfunction findParent(finder, node, rootNode) {\n  if (node !== null && node !== rootNode.parentNode) {\n    if (finder(node)) {\n      return node\n    } else {\n      return findParent(finder, node.parentNode, rootNode)\n    }\n  } else {\n    return null\n  }\n}\n\n/**\n* Get the closest element that scrolls\n* @param {HTMLElement} node - the child element to start searching for scroll parent at\n* @param {HTMLElement} rootNode - the root element of the component\n* @return {HTMLElement} the closest parentNode that scrolls\n*/\nconst getClosestScrollParent = findParent.bind(\n  null,\n  node => node.scrollHeight > node.clientHeight,\n)\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node - the element that should scroll into view\n * @param {HTMLElement} rootNode - the root element of the component\n * @param {Boolean} alignToTop - align element to the top of the visible area of the scrollable ancestor\n */\nfunction scrollIntoView(node, rootNode) {\n  const scrollParent = getClosestScrollParent(node, rootNode)\n  if (scrollParent === null) {\n    return\n  }\n  const scrollParentStyles = getComputedStyle(scrollParent)\n  const scrollParentRect = scrollParent.getBoundingClientRect()\n  const scrollParentBorderTopWidth = parseInt(\n    scrollParentStyles.borderTopWidth,\n    10,\n  )\n  const scrollParentBorderBottomWidth = parseInt(\n    scrollParentStyles.borderBottomWidth,\n    10,\n  )\n  const scrollParentTop = scrollParentRect.top + scrollParentBorderTopWidth\n  const nodeRect = node.getBoundingClientRect()\n  const nodeOffsetTop = nodeRect.top + scrollParent.scrollTop\n  const nodeTop = nodeOffsetTop - scrollParentTop\n  if (nodeTop < scrollParent.scrollTop) {\n    // the item is above the scrollable area\n    scrollParent.scrollTop = nodeTop\n  } else if (\n    nodeTop +\n      nodeRect.height +\n      scrollParentBorderTopWidth +\n      scrollParentBorderBottomWidth >\n    scrollParent.scrollTop + scrollParentRect.height\n  ) {\n    // the item is below the scrollable area\n    scrollParent.scrollTop =\n      nodeTop +\n      nodeRect.height -\n      scrollParentRect.height +\n      scrollParentBorderTopWidth +\n      scrollParentBorderBottomWidth\n  }\n  // the item is within the scrollable area (do nothing)\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n  return wrapper\n  function wrapper(...args) {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n}\n\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls\n * `event.preventDefault()`. Not sure this is the best\n * way to do this, but it seems legit...\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\nfunction composeEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      fn && fn(event, ...args)\n      return event.defaultPrevented\n    })\n}\n\n/**\n * This generates a unique ID for all autocomplete inputs\n * @param {String} prefix the prefix for the id\n * @return {String} the unique ID\n */\nfunction generateId(prefix) {\n  return `${prefix}-${idCounter++}`\n}\n\n/**\n * This is only used in tests... Could be useful in SSR?\n * @param {Number} num The number to set the idCountry to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Returns the first argument that is not undefined\n * @param {...*} args the arguments\n * @return {*} the defined value\n */\nfunction firstDefined(...args) {\n  return args.find(a => typeof a !== 'undefined')\n}\n\nfunction isNumber(thing) {\n  // not NaN and is a number type\n  // eslint-disable-next-line no-self-compare\n  return thing === thing && typeof thing === 'number'\n}\n\n// eslint-disable-next-line complexity\nfunction getA11yStatusMessage({\n  isOpen,\n  highlightedItem,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    if (selectedItem) {\n      return itemToString(selectedItem)\n    } else {\n      return ''\n    }\n  }\n  const resultCountChanged = resultCount !== previousResultCount\n  if (!resultCount) {\n    return 'No results.'\n  } else if (!highlightedItem || resultCountChanged) {\n    return `${resultCount} ${resultCount === 1 ?\n      'result is' :\n      'results are'} available, use up and down arrow keys to navigate.`\n  }\n  return itemToString(highlightedItem)\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (element.nodeName) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  } else {\n    // then we assume this is react\n    return typeof element.type === 'string'\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n  return element.props || /* istanbul ignore next (preact) */ element.attributes\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  throw new Error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nexport {\n  cbToCb,\n  findParent,\n  composeEventHandlers,\n  debounce,\n  scrollIntoView,\n  generateId,\n  firstDefined,\n  isNumber,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n}\n","/* eslint camelcase:0 */\n\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport setA11yStatus from './set-a11y-status'\nimport {\n  cbToCb,\n  findParent,\n  composeEventHandlers,\n  debounce,\n  scrollIntoView,\n  generateId,\n  firstDefined,\n  isNumber,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSelectedItem: PropTypes.any,\n    defaultInputValue: PropTypes.string,\n    defaultIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onClick: PropTypes.func,\n    itemCount: PropTypes.number,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    /* eslint-enable */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultSelectedItem: null,\n    defaultInputValue: '',\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => (i == null ? '' : String(i)),\n    onStateChange: () => {},\n    onUserAction: () => {},\n    onChange: () => {},\n  }\n\n  // this is an experimental feature\n  // so we're not going to document this yet\n  // nor are we going to test it.\n  // We will try to avoid breaking it, but\n  // we make no guarantees.\n  // If you need it, we recommend that you lock\n  // down your version of downshift (don't use a\n  // version range) to avoid surprise breakages.\n  static stateChangeTypes = {\n    unknown: '__autocomplete_unknown__',\n    mouseUp: '__autocomplete_mouseup__',\n    itemMouseEnter: '__autocomplete_item_mouseenter__',\n    keyDownArrowUp: '__autocomplete_keydown_arrow_up__',\n    keyDownArrowDown: '__autocomplete_keydown_arrow_down__',\n    keyDownEscape: '__autocomplete_keydown_escape__',\n    keyDownEnter: '__autocomplete_keydown_enter__',\n    blurInput: '__autocomplete_blur_input__',\n    changeInput: '__autocomplete_change_input__',\n    keyDownSpaceButton: '__autocomplete_keydown_space_button__',\n    clickButton: '__autocomplete_click_button__',\n    controlledPropUpdatedSelectedItem:\n      '__autocomplete_controlled_prop_updated_selected_item__',\n  }\n\n  constructor(...args) {\n    super(...args)\n    const state = this.getState({\n      highlightedIndex: this.props.defaultHighlightedIndex,\n      isOpen: this.props.defaultIsOpen,\n      inputValue: this.props.defaultInputValue,\n      selectedItem: this.props.defaultSelectedItem,\n    })\n    if (state.selectedItem) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = generateId('downshift')\n  root_handleClick = composeEventHandlers(\n    this.props.onClick,\n    this.root_handleClick,\n  )\n  input = null\n  items = []\n  previousResultCount = 0\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key) ?\n        this.props[key] :\n        stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    if (this.props.itemCount === undefined) {\n      return this.items.length\n    } else {\n      return this.props.itemCount\n    }\n  }\n\n  getItemNodeFromIndex = index => {\n    return document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    this.internalSetState({highlightedIndex, ...otherStateToSet}, () => {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      const rootNode = this._rootNode\n      scrollIntoView(node, rootNode)\n    })\n  }\n\n  openAndHighlightDefaultIndex = (otherStateToSet = {}) => {\n    this.setHighlightedIndex(undefined, {isOpen: true, ...otherStateToSet})\n  }\n\n  highlightDefaultIndex = (otherStateToSet = {}) => {\n    this.setHighlightedIndex(undefined, otherStateToSet)\n  }\n\n  moveHighlightedIndex = (amount, otherStateToSet) => {\n    if (this.getState().isOpen) {\n      this.changeHighlightedIndex(amount, otherStateToSet)\n    } else {\n      this.openAndHighlightDefaultIndex(otherStateToSet)\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  changeHighlightedIndex = (moveAmount, otherStateToSet) => {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0) {\n      return\n    }\n    const {highlightedIndex} = this.getState()\n    let baseIndex = highlightedIndex\n    if (baseIndex === null) {\n      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n    }\n    let newIndex = baseIndex + moveAmount\n    if (newIndex < 0) {\n      newIndex = itemsLastIndex\n    } else if (newIndex > itemsLastIndex) {\n      newIndex = 0\n    }\n    this.setHighlightedIndex(newIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        isOpen: false,\n      },\n      () => {\n        const inputNode = this._rootNode.querySelector(`#${this.inputId}`)\n        inputNode && inputNode.focus && inputNode.focus()\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    this.internalSetState(\n      {\n        isOpen: false,\n        highlightedIndex: null,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cbToCb(cb),\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (!item) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState(stateToSet, cb) {\n    let onChangeArg\n    const onStateChangeArg = {}\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        stateToSet =\n          typeof stateToSet === 'function' ? stateToSet(state) : stateToSet\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          stateToSet.hasOwnProperty('selectedItem') &&\n          stateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = stateToSet.selectedItem\n        }\n        stateToSet.type = stateToSet.type || Downshift.stateChangeTypes.unknown\n        Object.keys(stateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== stateToSet[key]) {\n            onStateChangeArg[key] = stateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = stateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = stateToSet[key]\n          }\n        })\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a callback\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {\n      getRootProps,\n      getButtonProps,\n      getLabelProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      reset,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getButtonProps,\n      getLabelProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      itemToString,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = ({refKey = 'ref', onClick, ...rest} = {}) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    return {\n      [refKey]: this.rootRef,\n      onClick: composeEventHandlers(onClick, this.root_handleClick),\n      ...rest,\n    }\n  }\n\n  root_handleClick = event => {\n    event.preventDefault()\n    const itemParent = findParent(\n      node => {\n        const index = this.getItemIndexFromId(node.getAttribute('id'))\n        return isNumber(index)\n      },\n      event.target,\n      this._rootNode,\n    )\n    if (itemParent) {\n      this.selectItemAtIndex(\n        this.getItemIndexFromId(itemParent.getAttribute('id')),\n      )\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? 5 : 1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowDown,\n      })\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? -5 : -1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowUp,\n      })\n    },\n\n    Enter(event) {\n      if (this.getState().isOpen) {\n        event.preventDefault()\n        this.selectHighlightedItem({\n          type: Downshift.stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({type: Downshift.stateChangeTypes.keyDownEscape})\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: Downshift.stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  getButtonProps = ({onClick, onKeyDown, ...rest} = {}) => {\n    const {isOpen} = this.getState()\n    return {\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-expanded': isOpen,\n      'aria-haspopup': true,\n      onClick: composeEventHandlers(onClick, this.button_handleClick),\n      onKeyDown: composeEventHandlers(onKeyDown, this.button_handleKeyDown),\n      ...rest,\n    }\n  }\n\n  button_handleKeyDown = event => {\n    if (this.buttonKeyDownHandlers[event.key]) {\n      this.buttonKeyDownHandlers[event.key].call(this, event)\n    }\n  }\n\n  button_handleClick = event => {\n    event.preventDefault()\n    this.toggleMenu({type: Downshift.stateChangeTypes.clickButton})\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = (props = {}) => {\n    this.getLabelProps.called = true\n    if (\n      this.getInputProps.called &&\n      props.htmlFor &&\n      props.htmlFor !== this.inputId\n    ) {\n      throw new Error(\n        `downshift: You provided the htmlFor of \"${props.htmlFor}\" for your label, but the id of your input is \"${this\n          .inputId}\". You must either remove the id from your input or set the htmlFor of the label equal to the input id.`,\n      )\n    }\n    this.inputId = firstDefined(\n      this.inputId,\n      props.htmlFor,\n      generateId('downshift-input'),\n    )\n    return {\n      ...props,\n      htmlFor: this.inputId,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({onKeyDown, onBlur, onChange, onInput, ...rest} = {}) => {\n    this.getInputProps.called = true\n    if (this.getLabelProps.called && rest.id && rest.id !== this.inputId) {\n      throw new Error(\n        `downshift: You provided the id of \"${rest.id}\" for your input, but the htmlFor of your label is \"${this\n          .inputId}\". You must either remove the id from your input or set the htmlFor of the label equal to the input id.`,\n      )\n    }\n    this.inputId = firstDefined(\n      this.inputId,\n      rest.id,\n      generateId('downshift-input'),\n    )\n    const onChangeKey =\n      process.env.LIBRARY === 'preact' ? /* istanbul ignore next (preact) */\n      'onInput' :\n        'onChange'\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n    return {\n      role: 'combobox',\n      'aria-autocomplete': 'list',\n      'aria-expanded': isOpen,\n      'aria-activedescendant':\n        typeof highlightedIndex === 'number' && highlightedIndex >= 0 ?\n          this.getItemId(highlightedIndex) :\n          null,\n      autoComplete: 'off',\n      value: inputValue,\n      // preact compatibility\n      [onChangeKey]: composeEventHandlers(\n        onChange,\n        onInput,\n        this.input_handleChange,\n      ),\n      onKeyDown: composeEventHandlers(onKeyDown, this.input_handleKeyDown),\n      onBlur: composeEventHandlers(onBlur, this.input_handleBlur),\n      ...rest,\n      id: this.inputId,\n    }\n  }\n\n  input_handleKeyDown = event => {\n    if (event.key && this.keyDownHandlers[event.key]) {\n      this.keyDownHandlers[event.key].call(this, event)\n    }\n  }\n\n  input_handleChange = event => {\n    this.internalSetState({\n      type: Downshift.stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: event.target.value,\n    })\n  }\n\n  input_handleBlur = () => {\n    if (!this.isMouseDown) {\n      this.reset({type: Downshift.stateChangeTypes.blurInput})\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// ITEM\n  getItemId(index) {\n    return `${this.id}-item-${index}`\n  }\n\n  getItemIndexFromId(id) {\n    if (id) {\n      return Number(id.split(`${this.id}-item-`)[1])\n    } else {\n      return null\n    }\n  }\n\n  getItemProps = (\n    {\n      onMouseEnter,\n      index,\n      item = requiredProp('getItemProps', 'item'),\n      ...rest\n    } = {},\n  ) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n    return {\n      id: this.getItemId(index),\n      onMouseEnter: composeEventHandlers(onMouseEnter, () => {\n        this.setHighlightedIndex(index, {\n          type: Downshift.stateChangeTypes.itemMouseEnter,\n        })\n      }),\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  reset = (otherStateToSet = {}, cb) => {\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: false,\n        highlightedIndex: null,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cbToCb(cb),\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    this.internalSetState(\n      ({isOpen}) => {\n        return {isOpen: !isOpen, ...otherStateToSet}\n      },\n      () => {\n        const {isOpen} = this.getState()\n        if (isOpen) {\n          this.highlightDefaultIndex()\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cbToCb(cb))\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cbToCb(cb))\n  }\n\n  updateStatus = debounce(() => {\n    if (!this._isMounted) {\n      return\n    }\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex] || {}\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n    setA11yStatus(status)\n  }, 200)\n\n  componentDidMount() {\n    // the _isMounted property is because we have `updateStatus` in a `debounce`\n    // and we don't want to update the status if the component has been umounted\n    this._isMounted = true\n    // this.isMouseDown helps us track whether the mouse is currently held down.\n    // This is useful when the user clicks on an item in the list, but holds the mouse\n    // down long enough for the list to disappear (because the blur event fires on the input)\n    // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n    // trigger hiding the menu.\n    const onMouseDown = () => {\n      this.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      this.isMouseDown = false\n      if (\n        (event.target === this._rootNode ||\n          !this._rootNode.contains(event.target)) &&\n        this.getState().isOpen\n      ) {\n        this.reset({type: Downshift.stateChangeTypes.mouseUp})\n      }\n    }\n    window.addEventListener('mousedown', onMouseDown)\n    window.addEventListener('mouseup', onMouseUp)\n\n    this.cleanup = () => {\n      this._isMounted = false\n      window.removeEventListener('mousedown', onMouseDown)\n      window.removeEventListener('mouseup', onMouseUp)\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItem !== prevProps.selectedItem\n    ) {\n      this.internalSetState({\n        type: Downshift.stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n    this.updateStatus()\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and\n    this.items = []\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n    if (this.getRootProps.called) {\n      validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    } else {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n  }\n}\n\nexport default Downshift\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified) {\n    throw new Error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    throw new Error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!getElementProps(element).hasOwnProperty(refKey)) {\n    throw new Error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n  if (!getElementProps(element).hasOwnProperty('onClick')) {\n    throw new Error(\n      `downshift: You must apply the \"onClick\" prop from getRootProps onto your root element.`,\n    )\n  }\n}\n","import Downshift from './downshift'\n\n/*\n * Fix importing in typescript after rollup compilation\n * https://github.com/rollup/rollup/issues/1156\n * https://github.com/Microsoft/TypeScript/issues/13017#issuecomment-268657860\n */\nDownshift.default = Downshift\n\nexport default Downshift\n"],"names":["setStatus","status","isSameAsLast","statuses","length","getStatusDiv","innerHTML","filter","Boolean","map","getStatusHtml","join","index","statusDiv","document","createElement","setAttribute","assign","style","body","appendChild","cbToCb","cb","noop","findParent","finder","node","rootNode","parentNode","scrollIntoView","scrollParent","getClosestScrollParent","scrollParentStyles","getComputedStyle","scrollParentRect","getBoundingClientRect","scrollParentBorderTopWidth","parseInt","borderTopWidth","scrollParentBorderBottomWidth","borderBottomWidth","scrollParentTop","top","nodeRect","nodeTop","scrollTop","height","debounce","fn","time","timeoutId","args","setTimeout","composeEventHandlers","fns","event","some","defaultPrevented","generateId","prefix","idCounter","firstDefined","find","a","isNumber","thing","unwrapArray","arg","defaultValue","Array","isArray","isDOMElement","element","nodeName","type","getElementProps","props","attributes","requiredProp","fnName","propName","Error","validateGetRootPropsCalledCorrectly","refKey","refKeySpecified","isComposite","hasOwnProperty","getElementById","bind","scrollHeight","clientHeight","Downshift","state","_this","getState","defaultHighlightedIndex","defaultIsOpen","defaultInputValue","defaultSelectedItem","selectedItem","inputValue","itemToString","stateToMerge","this","Object","keys","reduce","key","_this2","isControlledProp","undefined","itemCount","items","stateToSet","onChangeArg","onStateChangeArg","setState","_this3","nextState","nextFullState","stateChangeTypes","unknown","forEach","onStateChange","getStateAndHelpers","onChange","onUserAction","highlightedIndex","isOpen","getRootProps","getButtonProps","getLabelProps","getInputProps","getItemProps","openMenu","closeMenu","toggleMenu","selectItem","selectItemAtIndex","selectHighlightedItem","setHighlightedIndex","clearSelection","reset","id","Number","split","_isMounted","onMouseDown","isMouseDown","onMouseUp","target","_this4","_rootNode","contains","mouseUp","addEventListener","cleanup","removeEventListener","prevProps","internalSetState","controlledPropUpdatedSelectedItem","updateStatus","children","called","React","cloneElement","Component","defaultProps","highlightedItem","resultCount","previousResultCount","resultCountChanged","i","String","root_handleClick","onClick","input","getItemNodeFromIndex","_this5","getItemId","otherStateToSet","openAndHighlightDefaultIndex","highlightDefaultIndex","moveHighlightedIndex","amount","changeHighlightedIndex","moveAmount","itemsLastIndex","getItemCount","baseIndex","newIndex","inputNode","querySelector","inputId","focus","item","itemIndex","rootRef","rest","preventDefault","itemParent","getItemIndexFromId","getAttribute","keyDownHandlers","shiftKey","keyDownArrowDown","keyDownArrowUp","keyDownEnter","keyDownEscape","buttonKeyDownHandlers","keyDownSpaceButton","onKeyDown","button_handleClick","button_handleKeyDown","call","clickButton","htmlFor","onBlur","onInput","input_handleChange","input_handleKeyDown","input_handleBlur","changeInput","value","blurInput","onMouseEnter","push","indexOf","itemMouseEnter","getA11yStatusMessage","default"],"mappings":"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"}