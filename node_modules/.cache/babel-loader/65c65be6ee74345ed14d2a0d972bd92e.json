{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2016 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\n\n\nvar _diacritic = require('diacritic');\n\nvar _diacritic2 = _interopRequireDefault(_diacritic);\n\nvar _globalObject = require('global-object');\n\nvar _globalObject2 = _interopRequireDefault(_globalObject);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nmatchSorter.rankings = rankings;\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\n\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex;\n\n    if (rank >= threshold) {\n      matches.push({\n        item: item,\n        rank: rank,\n        index: index,\n        keyIndex: keyIndex\n      });\n    }\n\n    return matches;\n  }\n}\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {Number} - the highest ranking\n */\n\n\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1\n    };\n  }\n\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n    }\n\n    return {\n      rank: rank,\n      keyIndex: keyIndex\n    };\n  }, {\n    rank: rankings.NO_MATCH,\n    keyIndex: -1\n  });\n}\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\n\n\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 9] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options); // too long\n\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  } // case sensitive equals\n\n\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  } // Lowercasing before further comparison\n\n\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase(); // case insensitive equals\n\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  } // starts with\n\n\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH;\n  } // word starts with\n\n\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH;\n  } // contains\n\n\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  } // acronym\n\n\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM;\n  } // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n\n\n  return getClosenessRanking(testString, stringToRank);\n}\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\n\n\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a loose match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\n\n\nfunction getClosenessRanking(testString, stringToRank) {\n  var charNumber = 0;\n\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n\n      if (stringChar === matchChar) {\n        return j + 1;\n      }\n    }\n\n    return -1;\n  }\n\n  function getRanking(spread) {\n    var matching = spread - stringToRank.length + 1;\n    var ranking = rankings.MATCHES + 1 / matching;\n    return ranking;\n  }\n\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n\n  charNumber = firstIndex;\n\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\n\n\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aIndex = a.index,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bIndex = b.index,\n      bKeyIndex = b.keyIndex;\n  var same = aRank === bRank;\n\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      return aIndex < bIndex ? aFirst : bFirst;\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\n\n\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n  value = '' + value; // toString\n\n  if (!keepDiacritics) {\n    value = _diacritic2[\"default\"].clean(value);\n  }\n\n  return value;\n}\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\n\n\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n\n  var value = void 0;\n\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (key.indexOf('.') !== -1) {\n    // eslint-disable-line no-negated-condition\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj[nestedKey];\n    }, item);\n  } else {\n    value = item[key];\n  } // concat because `value` can be a string or an array\n\n\n  return value ? [].concat(value) : null;\n}\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\n\n\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n\n    return allVals;\n  }, []);\n}\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\n\n\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = {\n      key: key\n    };\n  }\n\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n} // some manual ✨ magic umd ✨ here because Rollup isn't capable of exposing our module the way we want\n// see dist-test/index.js\n\n/* istanbul ignore next */\n\n\nif ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n  matchSorter[\"default\"] = matchSorter;\n  module.exports = matchSorter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n} else if (typeof define === 'function' && define.amd) {\n  // eslint-disable-line\n  define(function () {\n    return matchSorter;\n  }); // eslint-disable-line\n} else {\n  _globalObject2[\"default\"].matchSorter = matchSorter; // eslint-disable-line\n}","map":{"version":3,"sources":["/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/match-sorter/dist/cjs/index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_typeof","Symbol","iterator","obj","constructor","_diacritic","require","_diacritic2","_interopRequireDefault","_globalObject","_globalObject2","__esModule","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","matchSorter","items","value","options","undefined","keys","_options$threshold","threshold","matchedItems","reduce","reduceItemsToRanked","sort","sortRankedItems","map","_ref","item","matches","index","_getHighestRanking","getHighestRanking","rank","keyIndex","push","getMatchRanking","valuesToRank","getAllValuesToRank","_ref2","_ref3","itemValue","attributes","newRank","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","toLowerCase","indexOf","getAcronym","getClosenessRanking","string","acronym","wordsInString","split","forEach","wordInString","splitByHyphenWords","splitByHyphenWord","substr","charNumber","findMatchingCharacter","matchChar","j","stringChar","getRanking","spread","matching","ranking","firstIndex","found","a","b","aFirst","bFirst","aRank","aIndex","aKeyIndex","bRank","bIndex","bKeyIndex","same","_ref4","keepDiacritics","clean","getItemValues","itemObj","nestedKey","concat","allVals","values","getKeyAttributes","Infinity","exports","module","defineProperty","define","amd"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * @name match-sorter\n                                                                                                                                                                                                                                                                               * @license MIT license.\n                                                                                                                                                                                                                                                                               * @copyright (c) 2016 Kent C. Dodds\n                                                                                                                                                                                                                                                                               * @author Kent C. Dodds <kent@doddsfamily.us>\n                                                                                                                                                                                                                                                                               */\n\n\nvar _diacritic = require('diacritic');\n\nvar _diacritic2 = _interopRequireDefault(_diacritic);\n\nvar _globalObject = require('global-object');\n\nvar _globalObject2 = _interopRequireDefault(_globalObject);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\n\nmatchSorter.rankings = rankings;\n\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\nfunction matchSorter(items, value) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var keys = options.keys,\n      _options$threshold = options.threshold,\n      threshold = _options$threshold === undefined ? rankings.MATCHES : _options$threshold;\n\n  var matchedItems = items.reduce(reduceItemsToRanked, []);\n  return matchedItems.sort(sortRankedItems).map(function (_ref) {\n    var item = _ref.item;\n    return item;\n  });\n\n  function reduceItemsToRanked(matches, item, index) {\n    var _getHighestRanking = getHighestRanking(item, keys, value, options),\n        rank = _getHighestRanking.rank,\n        keyIndex = _getHighestRanking.keyIndex;\n\n    if (rank >= threshold) {\n      matches.push({ item: item, rank: rank, index: index, keyIndex: keyIndex });\n    }\n    return matches;\n  }\n}\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {Number} - the highest ranking\n */\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return { rank: getMatchRanking(item, value, options), keyIndex: -1 };\n  }\n  var valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce(function (_ref2, _ref3, i) {\n    var rank = _ref2.rank,\n        keyIndex = _ref2.keyIndex;\n    var itemValue = _ref3.itemValue,\n        attributes = _ref3.attributes;\n\n    var newRank = getMatchRanking(itemValue, value, options);\n    var minRanking = attributes.minRanking,\n        maxRanking = attributes.maxRanking;\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n    }\n    return { rank: rank, keyIndex: keyIndex };\n  }, { rank: rankings.NO_MATCH, keyIndex: -1 });\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 9] */\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options);\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  // Lowercasing before further comparison\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase();\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  }\n\n  // starts with\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH;\n  }\n\n  // word starts with\n  if (testString.indexOf(' ' + stringToRank) !== -1) {\n    return rankings.WORD_STARTS_WITH;\n  }\n\n  // contains\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  }\n\n  // acronym\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM;\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank);\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string) {\n  var acronym = '';\n  var wordsInString = string.split(' ');\n  wordsInString.forEach(function (wordInString) {\n    var splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(function (splitByHyphenWord) {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a loose match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(testString, stringToRank) {\n  var charNumber = 0;\n  function findMatchingCharacter(matchChar, string, index) {\n    for (var j = index; j < string.length; j++) {\n      var stringChar = string[j];\n      if (stringChar === matchChar) {\n        return j + 1;\n      }\n    }\n    return -1;\n  }\n  function getRanking(spread) {\n    var matching = spread - stringToRank.length + 1;\n    var ranking = rankings.MATCHES + 1 / matching;\n    return ranking;\n  }\n  var firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n  charNumber = firstIndex;\n  for (var i = 1; i < stringToRank.length; i++) {\n    var matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    var found = charNumber > -1;\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n\n  var spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first\n * Note: will never return 0\n */\nfunction sortRankedItems(a, b) {\n  var aFirst = -1;\n  var bFirst = 1;\n  var aRank = a.rank,\n      aIndex = a.index,\n      aKeyIndex = a.keyIndex;\n  var bRank = b.rank,\n      bIndex = b.index,\n      bKeyIndex = b.keyIndex;\n\n  var same = aRank === bRank;\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      return aIndex < bIndex ? aFirst : bFirst;\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison(value, _ref4) {\n  var keepDiacritics = _ref4.keepDiacritics;\n\n  value = '' + value; // toString\n  if (!keepDiacritics) {\n    value = _diacritic2.default.clean(value);\n  }\n  return value;\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues(item, key) {\n  if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n    key = key.key;\n  }\n  var value = void 0;\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (key.indexOf('.') !== -1) {\n    // eslint-disable-line no-negated-condition\n    // handle nested keys\n    value = key.split('.').reduce(function (itemObj, nestedKey) {\n      return itemObj[nestedKey];\n    }, item);\n  } else {\n    value = item[key];\n  }\n  // concat because `value` can be a string or an array\n  return value ? [].concat(value) : null;\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce(function (allVals, key) {\n    var values = getItemValues(item, key);\n    if (values) {\n      values.forEach(function (itemValue) {\n        allVals.push({\n          itemValue: itemValue,\n          attributes: getKeyAttributes(key)\n        });\n      });\n    }\n    return allVals;\n  }, []);\n}\n\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = { key: key };\n  }\n  return _extends({\n    maxRanking: Infinity,\n    minRanking: -Infinity\n  }, key);\n}\n\n// some manual ✨ magic umd ✨ here because Rollup isn't capable of exposing our module the way we want\n// see dist-test/index.js\n/* istanbul ignore next */\nif ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n  matchSorter.default = matchSorter;\n  module.exports = matchSorter;\n  Object.defineProperty(exports, '__esModule', { value: true });\n} else if (typeof define === 'function' && define.amd) {\n  // eslint-disable-line\n  define(function () {\n    return matchSorter;\n  }); // eslint-disable-line\n} else {\n  _globalObject2.default.matchSorter = matchSorter; // eslint-disable-line\n}"]},"metadata":{},"sourceType":"script"}