{"ast":null,"code":"import _classCallCheck from \"/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/lolo/Descargas/paginaflolo/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/lolo/Descargas/paginaflolo/paginaf4/src/components/posts/Posts.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PostForm from './PostForm';\nimport PostFeed from './PostFeed';\nimport Spinner from '../common/Spinner';\nimport { getPosts } from '../../actions/postActions';\nimport ReactPaginate from 'react-paginate';\n\nvar Posts = /*#__PURE__*/function (_Component) {\n  _inherits(Posts, _Component);\n\n  var _super = _createSuper(Posts);\n\n  function Posts() {\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    _this = _super.call(this);\n\n    _this.handlePageClicked = function (data) {\n      var selected = data.selected;\n\n      _this.setState({\n        selectedPage: selected,\n        currentPage: Number(selected + 1)\n      });\n    };\n\n    _this.state = {\n      search: '',\n      currentPage: 1,\n      todosPerPage: 5,\n      selectedPage: 1,\n      isOpen: false\n    };\n    _this.searchHandler = _this.searchHandler.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Posts, [{\n    key: \"searchHandler\",\n    value: function searchHandler(event) {\n      var lolo = event.target.value.toUpperCase();\n      this.setState({\n        search: lolo\n      });\n      this.setState({\n        selectedPage: 1,\n        currentPage: Number(1)\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event) {\n      this.setState({\n        currentPage: Number(event.target.id)\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$post = this.props.post,\n          posts = _this$props$post.posts,\n          loading = _this$props$post.loading;\n      var _this$state = this.state,\n          currentPage = _this$state.currentPage,\n          todosPerPage = _this$state.todosPerPage;\n      var indexOfLastTodo = currentPage * todosPerPage;\n      var indexOfFirstTodo = indexOfLastTodo - todosPerPage;\n      var pageNumbers = [];\n\n      for (var i = 1; i <= Math.ceil(posts.length / todosPerPage); i++) {\n        pageNumbers.push(i);\n      }\n\n      var filteredContacts = posts.filter(function (task) {\n        var poetName = task.text.toUpperCase();\n        var separador = \" \";\n        var i;\n\n        var poetName1 = _this2.state.search.split(separador);\n\n        var tpalabras = poetName1.length;\n        var datopa;\n\n        if (tpalabras > 3) {\n          return poetName.indexOf(_this2.state.search) !== -1;\n        } else {\n          for (i = 0; i < tpalabras; i++) {\n            //console.log(\"recorriendo el aray\")\n            //  console.log(poetName1[i]); \n            datopa = poetName1[i]; //datopa=datopa+\" \"+datopa;\n\n            return poetName.indexOf(datopa) !== -1; //  datopa=poetName1[i];\n            //  return poetName.indexOf(datopa) !== -1 ;\n          }\n\n          return poetName;\n        }\n      } //FIN EDL FUNCION MAP\n      );\n      var Pagination = /*#__PURE__*/React.createElement(ReactPaginate, {\n        previousLabel: '<',\n        nextLabel: '>',\n        breakLabel: '...',\n        breakClassName: 'break-me',\n        pageCount: Math.ceil(filteredContacts.length / todosPerPage),\n        marginPagesDisplayed: 2,\n        pageRangeDisplayed: 2,\n        onPageChange: this.handlePageClicked,\n        containerClassName: 'pagination pagination justify-content-center ',\n        subContainerClassName: ' page-item page-link badge badge-primary',\n        activeClassName: 'active',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }); //    let dashboardContent,dashboardContent1;\n\n      var currentTodos = filteredContacts.slice(indexOfFirstTodo, indexOfLastTodo);\n      var postContent;\n\n      if (posts === null || loading) {\n        postContent = /*#__PURE__*/React.createElement(Spinner, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 21\n          }\n        });\n      } else {\n        postContent = /*#__PURE__*/React.createElement(PostFeed, {\n          posts: currentTodos,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 21\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        name: \"buscar\",\n        className: \"form-control\",\n        placeholder: \"Buscar datos en los post\",\n        onChange: this.searchHandler,\n        value: this.state.search,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 23\n        }\n      })), /*#__PURE__*/React.createElement(PostForm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 15\n        }\n      }), postContent, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      }, \"NUMERO DE COINCIDENCIAS EN EL POST ( \", filteredContacts.length, \")\")), Pagination)));\n    }\n  }]);\n\n  return Posts;\n}(Component);\n\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    post: state.post\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getPosts: getPosts\n})(Posts);","map":{"version":3,"sources":["/home/lolo/Descargas/paginaflolo/paginaf4/src/components/posts/Posts.js"],"names":["React","Component","PropTypes","connect","PostForm","PostFeed","Spinner","getPosts","ReactPaginate","Posts","handlePageClicked","data","selected","setState","selectedPage","currentPage","Number","state","search","todosPerPage","isOpen","searchHandler","bind","event","lolo","target","value","toUpperCase","id","props","post","posts","loading","indexOfLastTodo","indexOfFirstTodo","pageNumbers","i","Math","ceil","length","push","filteredContacts","filter","task","poetName","text","separador","poetName1","split","tpalabras","datopa","indexOf","Pagination","currentTodos","slice","postContent","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PostForm from './PostForm';\nimport PostFeed from './PostFeed';\nimport Spinner from '../common/Spinner';\nimport { getPosts } from '../../actions/postActions';\n\n\nimport ReactPaginate from 'react-paginate';\n\n\n\nclass Posts extends Component {\n  constructor(){\n    super();\n    this.state={\n      search:'',\n      currentPage: 1,\n      todosPerPage:5,\n      selectedPage: 1,    \n      isOpen: false           \n     \n    };\n\n    this.searchHandler=this.searchHandler.bind(this);\n\n  }\n\n\n  searchHandler(event){\n    const lolo = event.target.value.toUpperCase();\n    this.setState({search: lolo});\n    this.setState({\n      selectedPage: 1,\n     currentPage: Number(1)\n    })\n   }\n\n\n\nhandleClick(event) {\nthis.setState({\n  currentPage: Number(event.target.id)\n});\n}\n\n\nhandlePageClicked = data => {\nlet selected = data.selected;\nthis.setState({\n  selectedPage: selected,\n  currentPage: Number(selected+1)\n})\n};\n\n\n\n\n\n  componentDidMount(){\n    this.props.getPosts();\n  }\n\n  render() {\n    const { posts, loading } = this.props.post;\n\n\n\n\n    const { currentPage, todosPerPage } = this.state;\n\n    const indexOfLastTodo = currentPage * todosPerPage;\n    const indexOfFirstTodo = indexOfLastTodo - todosPerPage\n\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(posts.length / todosPerPage); i++) {\n      pageNumbers.push(i);\n    }\n\n\n    let filteredContacts = posts.filter(\n        (task) =>{\n            let poetName = task.text.toUpperCase();\n            let separador=\" \"; \n            let i;\n            let poetName1=this.state.search.split(separador);\n            let tpalabras=poetName1.length;    \n            let datopa;  \n            if (tpalabras>3){\n                return  poetName.indexOf(this.state.search) !== -1;    \n\n              }\n            else{\n\n                  for (i=0;i<tpalabras;i++) {\n                    //console.log(\"recorriendo el aray\")\n                    //  console.log(poetName1[i]); \n                      datopa=poetName1[i];\n                      //datopa=datopa+\" \"+datopa;\n                      return poetName.indexOf(datopa) !== -1 ;\n                    //  datopa=poetName1[i];\n                    //  return poetName.indexOf(datopa) !== -1 ;\n                  \n\n                    }\n                    return poetName;\n                  }\n            } //FIN EDL FUNCION MAP\n        \n      );\n\n      const Pagination = (\n        <ReactPaginate \n          previousLabel={'<'}\n          nextLabel={'>'}\n          breakLabel={'...'}\n          breakClassName={'break-me'}\n          pageCount={Math.ceil(filteredContacts.length / todosPerPage)}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={2}\n          onPageChange={this.handlePageClicked}\n          containerClassName={'pagination pagination justify-content-center ' }\n          subContainerClassName={' page-item page-link badge badge-primary'}\n          activeClassName={'active'}\n          \n          />      \n      ) \n\n\n  //    let dashboardContent,dashboardContent1;\n      const currentTodos = filteredContacts.slice(indexOfFirstTodo, indexOfLastTodo);\n  \n\n\n    let postContent;\n\n    if(posts === null || loading) {\n      postContent = <Spinner />;\n    } else {\n      postContent = <PostFeed posts={currentTodos} />;\n    }\n\n    return (\n      <div >                                      \n          <div  >\n            <div >\n                   <div className=\"container\"> \n                      <input type =\"text\"  name=\"buscar\" className=\"form-control\" placeholder=\"Buscar datos en los post\" onChange={this.searchHandler} value={this.state.search}  /> \n                                \n                   </div>    \n\n              <PostForm />\n              {postContent}\n\n              <center>\n                    <p>NUMERO DE COINCIDENCIAS EN EL POST ( {filteredContacts.length})</p>\n               </center>     \n                {Pagination}\n                                                        \n            </div>\n      \n        </div>\n      </div>\n    )\n  }\n}\n\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, { getPosts })(Posts);\n"]},"metadata":{},"sourceType":"module"}