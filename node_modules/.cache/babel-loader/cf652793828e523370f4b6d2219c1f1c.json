{"ast":null,"code":"import _slicedToArray from \"/home/lolo/Descargas/paginaflolo (copia)/paginaf4/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lolo/Descargas/paginaflolo (copia)/paginaf4/src/views/Header/Header.js\";\n\n//import React, { Component } from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\nimport \"./Header.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Badge from \"@material-ui/core/Badge\";\nimport TextField from \"@material-ui/core/TextField\"; //import Button from \"@material-ui/core/Button\";\n\nimport Button from \"../../components/CustomButtons/Button.js\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { showCartDlg, toggleMenu, logout } from \"../../actions/ventasActions\";\nimport cartImage from \"../../Images/logo2.png\"; //import Auth from \"../../Auth\";\n//import { categories } from \"../../Data\";\n\nimport Api from \"../../Api\"; //import {fetch_datacate} from \"../../Api\";\n\nimport Person from \"@material-ui/icons/PersonOutline\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Menu3 from \"../Menu/Menu3\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { useHistory } from \"react-router-dom\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport GridItem from \"../../components/Grid/GridItem.js\";\nimport GridContainer from \"../../components/Grid/GridContainer.js\";\nimport Card from \"../../components/Card/Card.js\";\nimport CardHeader from \"../../components/Card/CardHeader.js\";\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardFooter from \"../../components/Card/CardFooter.js\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentCategoriasql } from \"../../actions/categoriaActions\";\nimport { getCurrentArticulosql } from \"../../actions/articuloActions\";\nimport { getCurrentProducto } from \"../../actions/productoActions\";\nimport { Autocomplete } from '@material-ui/lab';\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete'; //import { getCurrentBusca } from \"../../actions/productoActions\";\n//import IconButton from \"@material-ui/core/IconButton\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\n\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Typography from \"@material-ui/core/Typography\";\nimport matchSorter from 'match-sorter'; //import Menu3 from \"../Menu/Menu3\";\n// Option items for product categories\n//auth: \n\n/*\n\nasync fetchData() {\n\n  this.setState({ loading: true });\n\n  // Parse the query string\n  let qsAsObject = queryString.parse(this.props.location.search);\n  //console.log(\"este es el resultado de la barra\")\n\n  //console.log(qsAsObject)\n  \n\n\n\n  let results = await Api.searchItems(qsAsObject);\n\n  this.setState({\n    items: results.data,\n    loading: false,\n    totalItemsCount: results.totalLength\n  });\n}\n\n*/\n\nvar styles = {\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  root: {\n    maxWidth: 445\n  },\n  media: {\n    height: 100,\n    marginTop: \"0\"\n  },\n  rightToolbar: {\n    marginLeft: \"auto\",\n    marginRight: -12\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\"\n  },\n  inputRoot: {\n    color: \"purple\",\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"green\"\n    },\n    \"&:hover .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"red\"\n    },\n    \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"purple\"\n    }\n  },\n  '@global': {\n    '.MuiAutocomplete-option[data-focus=\"true\"]': {\n      background: '#26c6da'\n    }\n  }\n};\nvar useStyles = makeStyles(styles);\n\nvar Header = function Header() {\n  var classes = useStyles();\n  var history = useHistory();\n  var dispatch = useDispatch(); //nrOfItemsInCard: state.cartItem.cartItems.length,\n  //loggedInUser: state.loggedInUser\n  //const login = useSelector (store => store.cartItem.cartItems)   \n\n  var ItemsInCard = useSelector(function (store) {\n    return store.cartItem.cartItems;\n  });\n  var loggedInUser = useSelector(function (store) {\n    return store.auth.isAuthenticated;\n  });\n  var loggedInName = useSelector(function (store) {\n    return store.auth.user;\n  });\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerm = _useState2[0],\n      setsearchTerm = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      searchTerm1 = _useState4[0],\n      setsearchTerm1 = _useState4[1];\n\n  var categoria = useSelector(function (store) {\n    return store.categoriafile.categoriafiles;\n  });\n  var categorialoading = useSelector(function (store) {\n    return store.categoriafile.loading;\n  }); //const data = useSelector (store => store.articulofile.articulofiles) \n\n  var data = useSelector(function (store) {\n    return store.productofile.productofiles;\n  });\n\n  var _useState5 = useState(data),\n      _useState6 = _slicedToArray(_useState5, 2),\n      items = _useState6[0],\n      setItems = _useState6[1];\n\n  var categoryFilterValue = \"AALL CATEGORIAS\";\n\n  var _useState7 = useState({\n    codigo: 1,\n    descripcion: \"Varios\"\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      prove = _useState8[0],\n      setProve = _useState8[1];\n\n  var filterOptions = createFilterOptions({\n    //matchFrom: 'tart',\n    limit: 500 //stringify: option => option.title,\n\n  }); //const filterOptions = (data, { inputValue }) => matchSorter(data, inputValue);\n\n  var handleInputChange = function handleInputChange(event) {\n    //setsearchTerm1(event.target.value)\n    console.log(data);\n    console.log(event.target.value);\n    var bus = matchSorter(data, event.target.value, {\n      keys: ['codigo', 'descripcion']\n    }); //matchSorter(objList, 'g', {keys: ['name', 'color']})\n\n    setItems(bus);\n    console.log(bus);\n  };\n  /*\n  if (categoria.length>0){\n     categoryFilterValue=categoria[0].descripcion\n  }\n  */\n\n\n  var nrOfItemsInCard = ItemsInCard.length;\n  console.log(data); //console.log(loggedInUser)\n\n  useEffect(function () {\n    dispatch(getCurrentCategoriasql()); //dispatch(getCurrentArticulosql())\n\n    dispatch(getCurrentProducto());\n  }, [dispatch]);\n  var dashbo = \"\";\n\n  if (loggedInUser) {\n    dashbo = /*#__PURE__*/React.createElement(AppBar, {\n      className: \"botones \",\n      style: {\n        backgroundColor: \"#FAFAFB\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IconButton, {\n      \"aria-label\": \"Cart\",\n      onClick: function onClick() {\n        dispatch(showCartDlg(true));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      badgeContent: nrOfItemsInCard,\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(ShoppingCartIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(\"img\", {\n      src: cartImage,\n      alt: \"Logo\",\n      style: {\n        marginLeft: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      label: \"Buscar Productos \",\n      value: searchTerm,\n      className: classes.textField,\n      onChange: function onChange(e) {\n        setsearchTerm(e.target.value); //dispatch(getCurrentBusca(e.target.value))             \n\n        history.push(\"/pos/?category=\" + categoryFilterValue + \"&term=\" + e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Menu3, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 27\n      }\n    }), console.log(items), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"button\",\n      onClick: function onClick() {\n        //   dispatch(showCartDlg(false));\n        history.push(\"/admin\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 31\n      }\n    }, \"Dashboard \"), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"button\",\n      onClick: function onClick() {\n        //   dispatch(showCartDlg(false));\n        history.push(\"/pos\");\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 29\n      }\n    }, \"Inicio\"), /*#__PURE__*/React.createElement(\"section\", {\n      className: classes.rightToolbar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"title\",\n      color: \"primary\",\n      style: {\n        fontSize: \"25px\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 27\n      }\n    }, \"Bienvenido :  \", loggedInName.name.toUpperCase(), \" - Serie : \", loggedInName.serie))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 5\n    }\n  }, dashbo);\n};\n\nexport default Header;\n/*\nposition=\"static\"\n                         <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              onChange={(e, newValue) => {\n                                if (newValue!=null){\n                              // setProve(newValue);\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue +\n                                  \"&term=\" +\n                                newValue.descripcion\n                                );\n                              } \n                              else{\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue )\n\n                              }\n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n\n                                 <IconButton color=\"primary\" aria-label=\"Edit\">\n                                  <EditIcon />\n                                </IconButton>\n                                <IconButton color=\"primary\" aria-label=\"Save\">\n                                  <SaveIcon />\n                                </IconButton>\n                                <IconButton color=\"primary\" aria-label=\"More Options\">\n                                  <MoreVertIcon />\n                                </IconButton>\n\n\n\n\n\n\n                                <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              onChange={(e, newValue) => {\n                                if (newValue!=null){\n                              // setProve(newValue);\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue +\n                                  \"&term=\" +\n                                newValue.descripcion\n                                );\n                              } \n                              else{\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue )\n\n                              }\n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n                                <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              autocomplete={false}\n                              onChange={(e, newValue) => {\n                               \n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}   onChange={e => {\n                                setsearchTerm(e.target.value)  \n                                \n                                //alert(e.target.value)\n                                dispatch(getCurrentBusca(e.target.value))             \n                              }\n                            }\n\n                                className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n                                  <Autocomplete\n                              id=\"prove\"\n                              options={items}\n                              name=\"prove\"\n                              autoComplete=\"off\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              filterOptions={filterOptions}\n                              onChange={(e, newValue) => {\n                                \n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    onChange={handleInputChange}\n                               className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n\n*/","map":{"version":3,"sources":["/home/lolo/Descargas/paginaflolo (copia)/paginaf4/src/views/Header/Header.js"],"names":["React","useState","useEffect","ShoppingCartIcon","IconButton","MenuIcon","Badge","TextField","Button","withRouter","connect","showCartDlg","toggleMenu","logout","cartImage","Api","Person","Avatar","Menu","MenuItem","Select","AppBar","Toolbar","Menu3","makeStyles","CircularProgress","useHistory","Table","TableBody","TableCell","TableHead","TableRow","TableContainer","Paper","GridItem","GridContainer","Card","CardHeader","CardMedia","CardFooter","useDispatch","useSelector","getCurrentCategoriasql","getCurrentArticulosql","getCurrentProducto","Autocomplete","createFilterOptions","MoreVertIcon","SaveIcon","EditIcon","Typography","matchSorter","styles","cardCategoryWhite","color","margin","fontSize","marginTop","marginBottom","root","maxWidth","media","height","rightToolbar","marginLeft","marginRight","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","inputRoot","borderColor","background","useStyles","Header","classes","history","dispatch","ItemsInCard","store","cartItem","cartItems","loggedInUser","auth","isAuthenticated","loggedInName","user","searchTerm","setsearchTerm","searchTerm1","setsearchTerm1","categoria","categoriafile","categoriafiles","categorialoading","loading","data","productofile","productofiles","items","setItems","categoryFilterValue","codigo","descripcion","prove","setProve","filterOptions","limit","handleInputChange","event","console","log","target","value","bus","keys","nrOfItemsInCard","length","dashbo","backgroundColor","textField","e","push","name","toUpperCase","serie"],"mappings":"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":["//import React, { Component } from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\nimport \"./Header.css\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Badge from \"@material-ui/core/Badge\";\nimport TextField from \"@material-ui/core/TextField\";\n//import Button from \"@material-ui/core/Button\";\nimport Button from \"../../components/CustomButtons/Button.js\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {\n  showCartDlg,\n  toggleMenu,\n  logout\n} from \"../../actions/ventasActions\";\nimport cartImage from \"../../Images/logo2.png\";\n//import Auth from \"../../Auth\";\n\n\n\n//import { categories } from \"../../Data\";\n\n\n\nimport Api from \"../../Api\";\n\n//import {fetch_datacate} from \"../../Api\";\n\nimport Person from \"@material-ui/icons/PersonOutline\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\n\nimport Menu3 from \"../Menu/Menu3\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\n\n\nimport GridItem from \"../../components/Grid/GridItem.js\";\nimport GridContainer from \"../../components/Grid/GridContainer.js\";\n\nimport Card from \"../../components/Card/Card.js\";\nimport CardHeader from \"../../components/Card/CardHeader.js\";\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardFooter from \"../../components/Card/CardFooter.js\";\n\n\nimport  { useDispatch,useSelector } from 'react-redux'\n\nimport { getCurrentCategoriasql }  from \"../../actions/categoriaActions\";\nimport {\n  getCurrentArticulosql\n} from \"../../actions/articuloActions\";\n\nimport { getCurrentProducto }  from \"../../actions/productoActions\";\n\nimport { Autocomplete } from '@material-ui/lab';\n\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\n//import { getCurrentBusca } from \"../../actions/productoActions\";\n\n\n//import IconButton from \"@material-ui/core/IconButton\";\n//import MenuIcon from \"@material-ui/icons/Menu\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport matchSorter from 'match-sorter';\n\n\n//import Menu3 from \"../Menu/Menu3\";\n\n\n// Option items for product categories\n\n//auth: \n\n\n/*\n\nasync fetchData() {\n\n  this.setState({ loading: true });\n\n  // Parse the query string\n  let qsAsObject = queryString.parse(this.props.location.search);\n  //console.log(\"este es el resultado de la barra\")\n\n  //console.log(qsAsObject)\n  \n\n\n\n  let results = await Api.searchItems(qsAsObject);\n\n  this.setState({\n    items: results.data,\n    loading: false,\n    totalItemsCount: results.totalLength\n  });\n}\n\n*/\n\n\n\n\n\nconst styles = {\n  cardCategoryWhite: {\n    color: \"rgba(255,255,255,.62)\",\n    margin: \"0\",\n    fontSize: \"14px\",\n    marginTop: \"0\",\n    marginBottom: \"0\"\n  },\n  root: {\n    maxWidth: 445,\n  },\n  media: {\n    height: 100,\n    marginTop: \"0\",\n  },\n  rightToolbar: {\n    marginLeft: \"auto\",\n    marginRight: -12\n  },\n  \n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\"\n  },\n  inputRoot: {\n    color: \"purple\",\n    \"& .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"green\"\n    },\n    \"&:hover .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"red\"\n    },\n    \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n      borderColor: \"purple\"\n    }\n  },\n  '@global': {\n    '.MuiAutocomplete-option[data-focus=\"true\"]': {\n        background: '#26c6da'\n    }\n}\n};\n\n\n\nconst useStyles = makeStyles(styles);\n\nconst Header = ()  => {\n  const classes = useStyles();\n  let  history = useHistory();\n  \n  const dispatch = useDispatch()\n\n  //nrOfItemsInCard: state.cartItem.cartItems.length,\n  //loggedInUser: state.loggedInUser\n  //const login = useSelector (store => store.cartItem.cartItems)   \n\n  const ItemsInCard = useSelector (store => store.cartItem.cartItems)   \n  const loggedInUser = useSelector (store => store.auth.isAuthenticated) \n  const loggedInName = useSelector (store => store.auth.user)     \n\n\n  const [searchTerm,setsearchTerm] = useState(\"\")\n  const [searchTerm1,setsearchTerm1] = useState(\"\")\n\n\n  const categoria = useSelector (store => store.categoriafile.categoriafiles)  \n  const categorialoading = useSelector (store => store.categoriafile.loading)  \n  //const data = useSelector (store => store.articulofile.articulofiles) \n\n  const data = useSelector (store => store.productofile.productofiles) \n  const [items ,setItems ]= useState(data) \n\n\n  let categoryFilterValue=\"AALL CATEGORIAS\";\n  const [prove, setProve] = useState({\n    codigo:1, \n    descripcion: \"Varios\",    \n   });\n\n\n   const filterOptions = createFilterOptions({\n    //matchFrom: 'tart',\n    limit:500\n    //stringify: option => option.title,\n   \n  });\n\n  //const filterOptions = (data, { inputValue }) => matchSorter(data, inputValue);\n\n  const   handleInputChange=(event)=>{\n      //setsearchTerm1(event.target.value)\n      console.log(data)\n      console.log(event.target.value)\n      let bus = matchSorter(data,event.target.value,{keys: ['codigo', 'descripcion']})\n      //matchSorter(objList, 'g', {keys: ['name', 'color']})\n      setItems(bus)\n      console.log(bus)\n\n  }\n\n\n\n  /*\n  if (categoria.length>0){\n     categoryFilterValue=categoria[0].descripcion\n  }\n*/\n\n  let nrOfItemsInCard = ItemsInCard.length;\n\n\n  console.log(data)\n  //console.log(loggedInUser)\n\n  useEffect(() => {\n     dispatch(getCurrentCategoriasql())    \n     //dispatch(getCurrentArticulosql())\n     dispatch(getCurrentProducto())\n      },[dispatch])\n\n  let dashbo=\"\"\n\n  if (loggedInUser){\n\n       dashbo=(\n\n          <AppBar className=\"botones \" \n          \n          style={{ backgroundColor: \"#FAFAFB\"}}>    \n                <Toolbar>\n\n              \n                      <IconButton\n                                  aria-label=\"Cart\"\n                                  onClick={() => {\n                                    dispatch(showCartDlg(true));\n                                  }}\n                                >\n                                  <Badge badgeContent={nrOfItemsInCard} color=\"primary\">\n                                    <ShoppingCartIcon />\n                                  </Badge>\n                      </IconButton>\n                      <img\n                            src={cartImage}\n                            alt={\"Logo\"}\n                            style={{ marginLeft: 10 }}\n              \n                          />\n                        <TextField\n                            label=\"Buscar Productos \"\n                            value={searchTerm}\n\n                            className={classes.textField}\n                            onChange={e => {\n                              setsearchTerm(e.target.value)     \n                              //dispatch(getCurrentBusca(e.target.value))             \n\n                              history.push(\n                                \"/pos/?category=\" +\n                                categoryFilterValue +\n                                \"&term=\" +\n                              e.target.value\n                              );\n              \n                            }}                  \n                            \n                          />  \n\n                      \n                          <Menu3  />\n\n                          {console.log(items)}\n\n                      \n\n                        \n\n                           \n\n\n                              <Button color=\"primary\" type=\"button\"  onClick={() => {\n\n                            //   dispatch(showCartDlg(false));\n                                history.push(\n                                  \"/admin\"\n                                );\n\n\n\n                              }}>Dashboard </Button>\n\n                            <Button color=\"primary\" type=\"button\"  onClick={() => {\n\n                            //   dispatch(showCartDlg(false));\n                                history.push(\n                                  \"/pos\"\n                                );\n\n\n\n                              }}>Inicio</Button>\n\n                          <section className={classes.rightToolbar}>\n                          <Typography variant=\"title\" color=\"primary\" style={{fontSize: \"25px\"}}>\n                          Bienvenido :  {loggedInName.name.toUpperCase()} - Serie : {loggedInName.serie}\n                          </Typography>\n\n\n                            \n                             \n                           </section>\n\n                             \n                              \n\n                              \n\n                </Toolbar>  \n         </AppBar>     \n    \n       )\n\n  }\n\n\n  return(\n    <div>    \n          {dashbo}\n     </div> \n    \n  )\n}\nexport default Header \n\n/*\nposition=\"static\"\n                         <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              onChange={(e, newValue) => {\n                                if (newValue!=null){\n                              // setProve(newValue);\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue +\n                                  \"&term=\" +\n                                newValue.descripcion\n                                );\n                              } \n                              else{\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue )\n\n                              }\n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n\n                                 <IconButton color=\"primary\" aria-label=\"Edit\">\n                                  <EditIcon />\n                                </IconButton>\n                                <IconButton color=\"primary\" aria-label=\"Save\">\n                                  <SaveIcon />\n                                </IconButton>\n                                <IconButton color=\"primary\" aria-label=\"More Options\">\n                                  <MoreVertIcon />\n                                </IconButton>\n\n\n\n\n\n\n                                <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              onChange={(e, newValue) => {\n                                if (newValue!=null){\n                              // setProve(newValue);\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue +\n                                  \"&term=\" +\n                                newValue.descripcion\n                                );\n                              } \n                              else{\n                                history.push(\n                                  \"/?category=\" +\n                                  categoryFilterValue )\n\n                              }\n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n                                <Autocomplete\n                              id=\"prove\"\n                              options={data}\n                              name=\"prove\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              autocomplete={false}\n                              onChange={(e, newValue) => {\n                               \n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}   onChange={e => {\n                                setsearchTerm(e.target.value)  \n                                \n                                //alert(e.target.value)\n                                dispatch(getCurrentBusca(e.target.value))             \n                              }\n                            }\n\n                                className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n                                  <Autocomplete\n                              id=\"prove\"\n                              options={items}\n                              name=\"prove\"\n                              autoComplete=\"off\"\n                              classes={classes}\n                              freeSolo      \n                              value={prove}\n                              filterOptions={filterOptions}\n                              onChange={(e, newValue) => {\n                                \n\n                              }}      \n                              //getOptionSelected={(option, value) => option.descripcion === value.descripcion}      \n                              getOptionLabel={(option) => option.descripcion}\n                              //getOptionLabel={option => option.descripcion?option.descripcion:option}\n                              style={{ width:\"95%\" }}\n                              renderInput={(params) => <TextField {...params}    onChange={handleInputChange}\n                               className={classes.textField} margin=\"dense\" label=\"Lista de Productos\" variant=\"outlined\" />}\n                              />\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}